#include <stdio.h>

typedef struct {
    int id;             
    int burst_time;     
    int remaining_time;
} Process;

void roundRobin(Process processes[], int n, int quantum) {
    int completion_time[n]; 
    int turnaround_time[n]; 
    int waiting_time[n];    
    int response_time[n];   
    float relative_delay[n]; 
    int total_waiting_time=0 ,total_reaction_time=0;
	float total_relative_delay= 0;
    
    int total_turnaround_time=0,i = 0;

    
    for ( i = 0; i < n; i++) {
        processes[i].remaining_time = processes[i].burst_time;
    }

    int current_time = 0;
    int completed = 0;

    while (completed < n) {
        for (i = 0; i < n; i++) {
            if (processes[i].remaining_time > 0) {
               
                if (processes[i].remaining_time == processes[i].burst_time) {
                    response_time[i] = current_time;
                    
                }

                int execution_time = (processes[i].remaining_time > quantum) ? quantum : processes[i].remaining_time;

                
                processes[i].remaining_time -= execution_time;

               
                current_time += execution_time;

                if (processes[i].remaining_time == 0) {
                    completion_time[i] = current_time;
                    turnaround_time[i] = completion_time[i];
                    waiting_time[i] = turnaround_time[i] - processes[i].burst_time;
                    relative_delay[i] = (float)turnaround_time[i] / processes[i].burst_time;
                    total_waiting_time += waiting_time[i];
                    total_turnaround_time += turnaround_time[i];
                    total_reaction_time += response_time[i];
                    total_relative_delay += relative_delay[i];
                    completed++;
                }
            }
        }
    }
    printf("----------------------------------------------------------------------------------------------\n");
    printf("| Process | Completion Time | Turnaround Time | Waiting Time | Response Time | Relative Delay \n");
    printf("----------------------------------------------------------------------------------------------\n");
    for (i = 0; i < n; i++) {
        printf("|    %2d   |        %3d      |        %3d       |      %3d     |      %3d      |      %.2f      \n", 
            processes[i].id, completion_time[i], turnaround_time[i], waiting_time[i], response_time[i], relative_delay[i]);
    }

    printf("----------------------------------------------------------------------------------------------\n");
    printf("Average Turnaround Time: %.2f\n", (double)total_turnaround_time / n);
	printf("Average Waiting Time: %.2f\n", (double)total_waiting_time / n);
    printf("Average Reaction Time: %.2f\n", (float)total_reaction_time / n);
    printf("Average Reaction Delay: %.2f\n", (float)total_relative_delay / n);
}

int main() {
    int n, i, quantum;
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    Process processes[n];
    for (i = 0; i < n; i++) {
        printf("Enter the burst time for process %d: ", i + 1);
        scanf("%d", &processes[i].burst_time);
        processes[i].id = i + 1;
    }
    printf("Enter the time quantum: ");
    scanf("%d", &quantum);
    roundRobin(processes, n, quantum);

    return 0;
}
