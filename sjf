#include <stdio.h>
void sort_by_burst_time(int burst_times[], int arrival_times[], int n) {
    int temp, temp_arrival,i;
    for (i = 0; i < n - 1; i++) {
    	int j;
        for (j = 0; j < n - i - 1; j++) {
            if (burst_times[j] > burst_times[j + 1]) {
                temp = burst_times[j];
                burst_times[j] = burst_times[j + 1];
                burst_times[j + 1] = temp;
                temp_arrival = arrival_times[j];
                arrival_times[j] = arrival_times[j + 1];
                arrival_times[j + 1] = temp_arrival;}}}}
void sjf(int burst_times[], int arrival_times[], int n) {
    int total_time = 0;
    float total_wait_time = 0;
    float total_turnaround_time = 0;
    float total_reaction_time = 0;
    float total_relative_delay = 0;
    int completed[n],i; 
    for (i = 0; i < n; i++)
        completed[i] = 0; 
printf("Process\tArrival Time\tBurst Time\tTurnaround Time\tWaiting Time\tReaction Time\tRelative Delay\n");
    int completed_count = 0;
    while (completed_count < n) {
        int shortest_burst = __INT_MAX__;
        int shortest_index = -1;
        for (i = 0; i < n; i++) {
            if (!completed[i] && arrival_times[i] <= total_time && burst_times[i] < shortest_burst) {
                shortest_burst = burst_times[i];
                shortest_index = i;}}
            if (shortest_index != -1) {
            int waiting_time = total_time - arrival_times[shortest_index];
            if (waiting_time < 0)
                waiting_time = 0;
            total_wait_time += waiting_time;
            total_time += burst_times[shortest_index];
            completed[shortest_index] = 1;
            completed_count++;

            int turnaround_time = total_time - arrival_times[shortest_index];
            int reaction_time = total_time - arrival_times[shortest_index] - burst_times[shortest_index];
            float relative_delay = (float)turnaround_time / burst_times[shortest_index];

            total_turnaround_time += turnaround_time;
            total_reaction_time += reaction_time;
            total_relative_delay += relative_delay;

            printf("%d\t%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t\t%.2f\n", shortest_index + 1, arrival_times[shortest_index],
                   burst_times[shortest_index],turnaround_time, waiting_time,  reaction_time, relative_delay);
        } else {
            int min_arrival_time = __INT_MAX__;
            for (i = 0; i < n; i++) {
                if (!completed[i] && arrival_times[i] < min_arrival_time)
                    min_arrival_time = arrival_times[i];
            }
            total_time = min_arrival_time;}}
    printf("Average Turnaround Time: %.2f\n", total_turnaround_time / n);        
    printf("Average Waiting Time: %.2f\n", total_wait_time / n);
    printf("Average Reaction Time: %.2f\n", total_reaction_time / n);
    printf("Average Relative Delay: %.2f\n", total_relative_delay / n);
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    int burst_times[n], arrival_times[n],i;
    printf("Enter arrival time and burst time for each process:\n");
    for (i = 0; i < n; i++) {
        printf("Process %d: ", i + 1);
        scanf("%d %d", &arrival_times[i], &burst_times[i]);
    }
    sjf(burst_times, arrival_times, n);
    return 0;
}
